---

- name: Validate qemu emulator exists
  ansible.builtin.stat:
    path: "{{ qemu_emulator }}"
  register: qemu_emulator_stat
  failed_when: not qemu_emulator_stat.stat.exists

- name: Validate VM IP address is defined
  ansible.builtin.fail:
    msg: "VM IP address must be defined in libvirt_create_bgp_machine.ip"
  when: libvirt_create_bgp_machine.ip is not defined or libvirt_create_bgp_machine.ip == ''

- name: Resolve VM image template
  ansible.builtin.set_fact:
    libvirt_create_bgp_resolved_image: "{{ vm_images[libvirt_create_bgp_machine.image_template | default(vm_default_image)] }}"
  when: libvirt_create_bgp_machine.image_template is defined

- name: Set image path and format from template
  ansible.builtin.set_fact:
    libvirt_create_bgp_image_path: "{{ vm_images_base_path }}/{{ libvirt_create_bgp_resolved_image.filename }}"
    libvirt_create_bgp_image_format: "{{ libvirt_create_bgp_resolved_image.format }}"
  when: libvirt_create_bgp_machine.image_template is defined

- name: Use custom image path if template not specified
  ansible.builtin.set_fact:
    libvirt_create_bgp_image_path: "{{ libvirt_create_bgp_machine.image_path }}"
    libvirt_create_bgp_image_format: "{{ libvirt_create_bgp_machine.image_format }}"
  when: libvirt_create_bgp_machine.image_template is not defined

- name: Validate image template exists in repository
  ansible.builtin.fail:
    msg: "Image template '{{ libvirt_create_bgp_machine.image_template }}' not found in vm_images repository"
  when:
    - libvirt_create_bgp_machine.image_template is defined
    - libvirt_create_bgp_machine.image_template not in vm_images

- name: Validate VM base image exists
  ansible.builtin.stat:
    path: "{{ libvirt_create_bgp_image_path }}"
  register: vm_image_stat
  failed_when: not vm_image_stat.stat.exists

- name: Split IP address into octets
  ansible.builtin.set_fact:
    libvirt_create_bgp_ip_octets: "{{ libvirt_create_bgp_machine.ip.split('.') }}"

- name: Calculate interface name from IP address
  ansible.builtin.set_fact:
    libvirt_create_bgp_ifname: "vm{{ '%02x%02x%02x%02x' | format(libvirt_create_bgp_ip_octets[0]|int, libvirt_create_bgp_ip_octets[1]|int, libvirt_create_bgp_ip_octets[2]|int, libvirt_create_bgp_ip_octets[3]|int) }}"

- name: Calculate MAC address from IP address
  ansible.builtin.set_fact:
    libvirt_create_bgp_mac: "be:ef:{{ '%02x:%02x:%02x:%02x' | format(libvirt_create_bgp_ip_octets[0]|int, libvirt_create_bgp_ip_octets[1]|int, libvirt_create_bgp_ip_octets[2]|int, libvirt_create_bgp_ip_octets[3]|int) }}"

- name: Check if VM already exists
  community.libvirt.virt:
    name: "{{ libvirt_create_bgp_machine.name }}"
    command: status
  register: vm_status
  failed_when: false
  changed_when: false

- name: Create virtual machine directory
  ansible.builtin.file:
    path: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}"
    state: directory
    owner: qemu
    group: qemu
    mode: '0755'
  when: vm_status.status is not defined

- name: Create boot disk snapshot
  ansible.builtin.command: |
    qemu-img create -f qcow2 -b {{ libvirt_create_bgp_image_path }} -F {{ libvirt_create_bgp_image_format }}
    /var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_vda.qcow2 {{ libvirt_create_bgp_machine.boot_disk_size_gb }}G
  args:
    creates: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_vda.qcow2"
  when: vm_status.status is not defined

- name: Set permissions on boot disk
  ansible.builtin.file:
    path: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_vda.qcow2"
    owner: qemu
    group: qemu
    mode: '0644'
  when: vm_status.status is not defined

- name: Create data disks
  ansible.builtin.command: |
    qemu-img create -f qcow2 /var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_{{ item.device }}.qcow2 {{ item.size_gb }}G
  args:
    creates: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_{{ item.device }}.qcow2"
  with_items: '{{ libvirt_create_bgp_machine.data_disks | default([]) }}'
  when: vm_status.status is not defined

- name: Set permissions on data disks
  ansible.builtin.file:
    path: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/disk_{{ item.device }}.qcow2"
    owner: qemu
    group: qemu
    mode: '0644'
  with_items: '{{ libvirt_create_bgp_machine.data_disks | default([]) }}'
  when: vm_status.status is not defined

- name: Gather facts for cloud-init templates
  ansible.builtin.setup:
  when: vm_status.status is not defined

- name: Create cloud-init temp directory
  ansible.builtin.tempfile:
    state: directory
    prefix: 'cloudinit-{{ libvirt_create_bgp_machine.name }}-'
  register: cloudinit_tmpdir
  when: vm_status.status is not defined

- name: Generate user-data
  ansible.builtin.template:
    src: user-data.j2
    dest: "{{ cloudinit_tmpdir.path }}/user-data"
    owner: root
    group: root
    mode: '0644'
  when: vm_status.status is not defined

- name: Generate meta-data
  ansible.builtin.template:
    src: meta-data.j2
    dest: "{{ cloudinit_tmpdir.path }}/meta-data"
    owner: root
    group: root
    mode: '0644'
  when: vm_status.status is not defined

- name: Generate network-config
  ansible.builtin.template:
    src: network-config.j2
    dest: "{{ cloudinit_tmpdir.path }}/network-config"
    owner: root
    group: root
    mode: '0644'
  when: vm_status.status is not defined

- name: Create cloud-init ISO
  ansible.builtin.command:
    cmd: >
      genisoimage
      -output /var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/{{ libvirt_create_bgp_machine.name }}-cloudinit.iso
      -volid cidata
      -joliet
      -rock
      user-data meta-data network-config
    chdir: "{{ cloudinit_tmpdir.path }}"
  args:
    creates: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/{{ libvirt_create_bgp_machine.name }}-cloudinit.iso"
  when: vm_status.status is not defined

- name: Set permissions on cloud-init ISO
  ansible.builtin.file:
    path: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/{{ libvirt_create_bgp_machine.name }}-cloudinit.iso"
    owner: qemu
    group: qemu
    mode: '0644'
  when: vm_status.status is not defined

- name: Remove cloud-init temp directory
  ansible.builtin.file:
    path: "{{ cloudinit_tmpdir.path }}"
    state: absent
  when: vm_status.status is not defined

- name: Place the virtual machine XML
  ansible.builtin.template:
    src: 'kvm-bgp.xml.j2'
    dest: "/var/lib/libvirt/images/{{ libvirt_create_bgp_machine.name }}/kvm.xml"
    owner: root
    group: root
    mode: '0644'
  when: vm_status.status is not defined

- name: Define the virtual machine
  community.libvirt.virt:
    command: define
    xml: '{{ lookup("template", "kvm-bgp.xml.j2") }}'
  when: vm_status.status is not defined

- name: Start the virtual machine
  community.libvirt.virt:
    name: '{{ libvirt_create_bgp_machine.name }}'
    autostart: true
    state: running
  when: vm_status.status is not defined
